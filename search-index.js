var searchIndex = JSON.parse('{\
"treeline":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Tree","borrow","borrow_mut","fmt","fmt","from","into","new","push","root","to_string","try_from","try_into","type_id"],"q":["treeline","","","","","","","","","","","","",""],"d":["a simple recursive type which is able to render its â€¦","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[["tree",3,[["",26,[["debug",8],["display",8]]]]],["formatter",3]],["result",6]],[[["tree",3,[["display",8]]],["formatter",3]],["result",6]],[[]],[[]],[[["display",8],["vec",3,[["tree",3,[["display",8]]]]]],["tree",3,[["display",8]]]],[[["tree",3,[["display",8]]],["tree",3,[["display",8]]]],["tree",3,[["display",8]]]],[[["display",8]],["tree",3,[["display",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Tree"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
